rpc_nodes:
  # Placeholder - нужно будет заполнить реальными
  ethereum: ["https://eth.meowrpc.com"]
  arbitrum: ["https://arbitrum.drpc.org"]

concurrency:
  max_parallel_wallets: 2 # Пример, можем изменить

wallets: # Настройки обработки кошельков
  process_order: "random" # Порядок обработки кошельков ("sequential" или "random")

delay: # задержки
  between_accounts: # задержка между обработкой РАЗНЫХ аккаунтов
    min: 10
    max: 15
    unit: "seconds"
  between_actions: # задержка между РАЗНЫМИ задачами для ОДНОГО аккаунта
    min: 30
    max: 120
    unit: "seconds"
  after_error: # задержка после ошибки при выполнении задачи для аккаунта
    min: 10
    max: 30
    unit: "seconds"
  between_retries: # настройки повторных попыток при ошибках сети/RPC
    delay: # задержка между попытками
      min: 5
      max: 10
      unit: "seconds"
    attempts: 15  # максимальное количество попыток

actions: # Настройки выполнения действий
  actions_per_account: # Количество случайных задач для выполнения на одном аккаунте за запуск
    min: 1
    max: 1
  task_order: "random" # Порядок выполнения выбранных задач ("sequential" или "random")

tasks:
  - name: log_balance # Пример существующей задачи
    network: "arbitrum"
    enabled: true
    params:
      token_address: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831" # USDC

  - name: dummy_task # Добавленная задача-заглушка
    network: "any" # Сеть не важна для этой задачи
    enabled: true
    params: {}

# Application State Persistence
state:
  # Enable resuming from the last successfully completed wallet state.
  # If true, processing will start from the wallet AFTER the last one recorded as fully completed.
  # IMPORTANT: When resuming is enabled, the 'process_order' for wallets is IGNORED,
  # and processing always continues sequentially from the last known point.
  # State saving/resuming requires a database connection (Postgres or SQLite).
  resume_enabled: true # Default: false